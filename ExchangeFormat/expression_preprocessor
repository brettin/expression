use POSIX;
use strict;
use DBI; 

my $timestamp = localtime(time);
print "\nSTART TIME $timestamp \n";


my $feature_batch_size = 10000;	
my $sample_batch_size = 200;
my $deploy_file = "/kb/dev_container/modules/expression/deploy.cfg";
open (DEPLOY,$deploy_file) or die "Unable to open deploy file : $deploy_file.\n\n"; 
my @deploy_lines = (<DEPLOY>);
close(DEPLOY);
chomp(@deploy_lines);
my $db_name = undef;
my $db_host = undef;
my $db_user = undef;
foreach my $deploy_line (@deploy_lines)
{
	if ($deploy_line =~ m/^dbName/)
	{
		my @temp = split('=',$deploy_line);
		$db_name = trim($temp[1]);
	}
	if ($deploy_line =~ m/^dbUser/) 
        { 
                my @temp = split('=',$deploy_line);
                $db_user = trim($temp[1]);
        } 
        if ($deploy_line =~ m/^dbhost/) 
        { 
                my @temp = split('=',$deploy_line);
                $db_host = trim($temp[1]);
        } 
}

my $dbh = DBI->connect('DBI:mysql:'.$db_name.':'.$db_host, $db_user, '', 
                           { RaiseError => 1, ShowErrorStatement => 1 } 
    );

my $dir = shift;	
my $show_measurement_duplicates = shift;
if ($show_measurement_duplicates eq "show")
{
    $show_measurement_duplicates = 1;
}
my $ls = `ls $dir`;	
my @ls_array = split(/\s+/,$ls);
my %ls_hash;

foreach my $ls_output (@ls_array)
{
	$ls_hash{$ls_output} = 1;
}
my $error_message = '';

#SEE IF STRAIN FILE EXISTS, IF SO CHECK TO SEE IF ALL THE GENOMES EXIST IS IN THE CDM
if (exists($ls_hash{'strain.tab'}))
{ 
  my $strain_file = $dir. "/strain.tab";
  open (STRAIN_IN,$strain_file) or die "Unable to open the strain file : $strain_file .\n";
  my @strain_lines = (<STRAIN_IN>);
  close(STRAIN_IN);
  chomp(@strain_lines);
  for (my $i = 0; $i <  scalar(@strain_lines); $i++) 
  {     
  	$strain_lines[$i] =~ s/\r//;
  } 
  my %genome_id_hash;  #key genome_id ->value : array_ref to the lines that genome_id appears on 
  my $strain_header_line = shift(@strain_lines);  #Must contain Genome-id column headers 
  my @strain_header_columns = split(/\t/,$strain_header_line); 
  my $genomeIdColIndex = undef; 
  my $header_counter = 0; 
  foreach my $header_column (@strain_header_columns) 
  { 
    $header_column = trim($header_column); 
    $genomeIdColIndex = column_header_checker($header_column,'^Genome-id$',$genomeIdColIndex,$header_counter); 
    $header_counter++; 
  } 
  unless (defined($genomeIdColIndex)) 
  { 
    $error_message .= "The strain.tab file must have a 'Genome-id' column headers.\n"; 
  } 
  if ($genomeIdColIndex eq "duplicate") 
  {
	$error_message .= "The strain.tab file has a duplicate column headers for 'Genome-id'.\n"; 
  } 
  if ($error_message ne '') 
  { 
        print $error_message; 
        exit; 
  }  
  my $strain_line_counter = 2;
  foreach my $strain_line (@strain_lines) 
  { 
        my @strain_elements = split("\t",$strain_line); 
        if ($strain_elements[$genomeIdColIndex] eq '') 
        { 
                $error_message .= "One of the lines in the sample file does not contain a source_id\n"; 
        } 
        else #populate data_structure. 
        { 
                #populate the %feature_id_hash
                if (exists($genome_id_hash{$strain_elements[$genomeIdColIndex]}))
                { 
                        #if exists add another line number to array
                        push(@{$genome_id_hash{$strain_elements[$genomeIdColIndex]}},$strain_line_counter);
                } 
                else 
                {
                        #did not exist, initialize the feature with the first_line_number it existed.
                        $genome_id_hash{$strain_elements[$genomeIdColIndex]}=[$strain_line_counter];
                }
	}
	$strain_line_counter++;
  }
  #DETERMINE IF ANY OF GENOMES ARE NOT IN THE CDM
  #Do query vs the DB vs all keys in %genome_id_hash
  #If the genome_id_exists delete the key from the hash  delete $HASH{$key};
  #After done with that and go through the remaining elements in the hash and report those Genomes that were not found in the DB.
  #Throw the an error, exit before modifying any of the files.  
  my $find_genomes_q = qq^ select id from kbase_sapling_v1.Genome where id in (^.
       		       join(",", ("?") x scalar(keys(%genome_id_hash))) . ") ";
  my $find_genomes_qh = $dbh->prepare($find_genomes_q) or die "Unable to prepare find_genomes_q : $find_genomes_q : ".$dbh->errstr();
  $find_genomes_qh->execute(keys(%genome_id_hash)) or die "Unable to execute find_genomes_q : $find_genomes_q : ".$find_genomes_qh->errstr();
  while (my ($db_genome_id) = $find_genomes_qh->fetchrow_array())
  {
	delete $genome_id_hash{$db_genome_id};
  }
  if (scalar(keys(%genome_id_hash)) > 0)
  {
	$error_message .= "\nThe following Genome IDs in the strain.tab file do not exist in the CDM.  ".
		       	  "Line number in the strain tab record in '()'.\n";
	foreach my $temp_genome_id (keys(%genome_id_hash))
	{
		$error_message .= "Genome ID : $temp_genome_id (".join (",",@{$genome_id_hash{$temp_genome_id}}).")\n";
	}
	$error_message .= "\n";
  }
}

if (!exists($ls_hash{'sample.tab'}))
{
	$error_message .= "A sample.tab file was not found in $dir : This program requires a sample.tab file.\n";
}
if (!exists($ls_hash{'measurement.tab'}))
{ 
        $error_message .= "A measurement.tab file was not found in $dir : This program requires a measurement.tab file.\n";
} 

if ($error_message ne '') 
{ 
        print $error_message; 
        exit; 
} 


#
#Go Through Sample FILE and check if it is OK.
#

my %feature_id_hash; #key {feature_id} -> value pointer to array of line numbers that contain that feature.

#Move original sample.tab and measurement.tab to original_sample.tab and original_measurement.tab respectively.
#(Only does log2level if the median of all sample was not zero)
print "\nMoving the  $dir/sample.tab to $dir/original_sample.tab\n"; 
print "\nMoving the  $dir/measurement.tab to $dir/original_measurement.tab\n"; 
`mv $dir/sample.tab $dir/original_sample.tab`; 
`mv $dir/measurement.tab $dir/original_measurement.tab`;

my $original_sample_file = $dir . "/original_sample.tab";
open(IN,$original_sample_file) or die "Unable to open sample file : $original_sample_file.\n\n"; 
my @sample_lines = (<IN>); 
close(IN);
chomp(@sample_lines);
for (my $i = 0; $i <  scalar(@sample_lines); $i++)
{
    $sample_lines[$i] =~ s/\r//; 
}	
my %sample_lines_hash;  #key source_id ->values an array ref to the elements on the line
my $sample_header_line = shift(@sample_lines);  #Must contain source-id and originalLog2Medain column headers
my @header_columns = split(/\t/,$sample_header_line);
my $originalLog2MedianColIndex = undef;
my $sampleSourceIdColIndex = undef;
my $header_counter = 0;
foreach my $header_column (@header_columns)
{ 
    $header_column = trim($header_column);
    $originalLog2MedianColIndex = column_header_checker($header_column,'^originalLog2Median$',$originalLog2MedianColIndex,$header_counter);
    $sampleSourceIdColIndex = column_header_checker($header_column,'^source-id$',$sampleSourceIdColIndex,$header_counter);
    $header_counter++;
}
unless (defined($originalLog2MedianColIndex) && defined($sampleSourceIdColIndex))
{
    $error_message .= "The sample.tab file must have a 'source-id' and 'originalLog2Median' column headers.\n";
}
if (($originalLog2MedianColIndex eq "duplicate") || ($sampleSourceIdColIndex eq "duplicate"))
{
    $error_message .= "The sample.tab file has a duplicate column headers for 'source-id' and/or 'originalLog2Median'.\n";
}
#LOOP THROUGH SAMPLE RECORDS and get the source-ids.
foreach my $sample_line (@sample_lines) 
{
    my @sample_elements = split("\t",$sample_line); 
    if ($sample_elements[$sampleSourceIdColIndex] eq '') 
    { 
        $error_message .= "One of the lines in the sample file does not contain a source_id\n";
    } 
    elsif (!(($sample_elements[$originalLog2MedianColIndex] =~ /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/)
              || ($sample_elements[$originalLog2MedianColIndex] eq ".")))
    { 
        $error_message .= "The Sample with source-id of ".$sample_elements[$sampleSourceIdColIndex].
                               " does not have a valid originalLog2Median (must be a number or .)\n";
    } 
    else #populate data_structure. 
    { 
	if (defined($sample_lines_hash{$sample_elements[$sampleSourceIdColIndex]}))
	{
	    $error_message .= "Multiple samples have the source-id of ".
	                      $sample_elements[$sampleSourceIdColIndex]."\n";
	}
	else
	{
	     $sample_lines_hash{$sample_elements[$sampleSourceIdColIndex]} = \@sample_elements; 
	}
    } 
} 


#
#Check measurement file for filled out entries, valid Sample-IDs and FeatureIDs existing on DB.
#
my %unique_sample_source_ids_in_measurement_file;
my $original_measurement_file = $dir . "/original_measurement.tab"; 
open(IN,$original_measurement_file) or die "Unable to open measurement file : $original_measurement_file.\n\n"; 
my $measurement_header_line = <IN>;
chomp($measurement_header_line);
$measurement_header_line =~ s/\r//;		 
my @measurement_header_columns = split(/\t/,$measurement_header_line); 
my $kbFeatureIdColIndex = undef; 
my $valueColIndex = undef; 
my $sampleIdColIndex = undef; 
my $measurementSourceIdColIndex = undef; 
my $header_counter = 0; 
foreach my $header_column (@measurement_header_columns) 
{ 
  $header_column = trim($header_column); 
  $kbFeatureIdColIndex = column_header_checker($header_column,'^KB-feature-id$',$kbFeatureIdColIndex,$header_counter); 
  $valueColIndex = column_header_checker($header_column,'^value$',$valueColIndex,$header_counter); 
  $sampleIdColIndex = column_header_checker($header_column,'^sample-id$',$sampleIdColIndex,$header_counter); 
  $measurementSourceIdColIndex = column_header_checker($header_column,'^source-id$',$measurementSourceIdColIndex,$header_counter); 
  $header_counter++; 
} 
unless (defined($kbFeatureIdColIndex) && defined($valueColIndex)  && defined($sampleIdColIndex)  && defined($measurementSourceIdColIndex)) 
{ 
        $error_message .= "The measurement.tab file must have a 'source-id','KB-feature-id','value' and 'sample-id' column headers.\n"; 
} 
if (($kbFeatureIdColIndex eq "duplicate") || ($valueColIndex eq "duplicate") 
   || ($sampleIdColIndex eq "duplicate") || ($measurementSourceIdColIndex eq "duplicate")) 
{ 
        $error_message .= "The measurement.tab file has a duplicate column headers for 'source-id','KB-feature-id','value' and/or 'sample-id'.\n"; 
        $error_message .= "'source-id' - $measurementSourceIdColIndex \n 'KB-feature-id' - $kbFeatureIdColIndex \n". 
                          "'value' - $valueColIndex \n 'sample-id' - $sampleIdColIndex .\n";  
} 
unless ($error_message ne '')
{
    #build hash of unique feature_ids
    my $measurement_line_counter = 1;
    while (my $measurement_line = <IN>)
    {	
        $measurement_line_counter++;	
    	chomp($measurement_line);
	$measurement_line =~ s/\r//;			
	my $measurement_error_message = '';
        my @measurement_elements = split("\t",$measurement_line); 

        #MAKE hash of sample source ids from measurement file
        if (($measurement_elements[$sampleIdColIndex] eq '') || ($measurement_elements[$sampleIdColIndex] eq '.'))
	{
            $measurement_error_message .= "The measurement record on line $measurement_line_counter does not contain a sample-id\n";
	}	        
        else
	{
	    $unique_sample_source_ids_in_measurement_file{$measurement_elements[$sampleIdColIndex]} = 1;
	}

        if (($measurement_elements[$measurementSourceIdColIndex] eq '') ||   ($measurement_elements[$measurementSourceIdColIndex] eq '.'))
        {
            $measurement_error_message .= "The measurement record on line $measurement_line_counter does not contain a source_id\n";
        } 
	if (($measurement_elements[$valueColIndex] eq '') || ($measurement_elements[$valueColIndex] eq '.'))
        {
            $measurement_error_message .= "The measurement record on line $measurement_line_counter does not contain a value\n";	
        } 
        if (($measurement_elements[$kbFeatureIdColIndex] eq '') || ($measurement_elements[$kbFeatureIdColIndex] eq '.'))
        {
	    $measurement_error_message .= "The measurement record on line $measurement_line_counter does not contain a feature_id\n";	
        }           
        unless ($measurement_elements[$valueColIndex] =~ /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/) 
        { 
             $measurement_error_message .= "The measurement record on line $measurement_line_counter ".  
                                                  "does not have a valid value number (".$measurement_elements[$valueColIndex].")\n"; 
        } 
        unless (exists($sample_lines_hash{$measurement_elements[$sampleIdColIndex]})) 
        { 
             $measurement_error_message .= "The measurement record with the source-id ". 
                                           $measurement_elements[$measurementSourceIdColIndex] . 
                                           " on line $measurement_line_counter has a sample_id that does not exist in the sample.tab file.\n"; 
        } 
	if ($measurement_error_message eq '') 
        { 
            #populate the %feature_id_hash 
            if (exists($feature_id_hash{$measurement_elements[$kbFeatureIdColIndex]})) 
            { 
                #if exists add another line number to array 
                push(@{$feature_id_hash{$measurement_elements[$kbFeatureIdColIndex]}},$measurement_line_counter);             						
	    } 
            else 
            { 
                #did not exist, initialize the feature with the first_line_number it existed. 
                $feature_id_hash{$measurement_elements[$kbFeatureIdColIndex]}=[$measurement_line_counter]; 
            } 
        }
	else
	{
	    $error_message .= $measurement_error_message;
	}
    }
    #check all of the unique feature_ids exist in the database
    #DETERMINE IF ANY OF FEATURES ARE NOT IN THE CDM 
    #Do queries vs the DB vs all keys in %feature_id_hash
    #If the feature_id_exists delete the key from the hash  delete $HASH{$key};
    #After done with that and go through the remaining elements in the hash and report that those Features were not found in the DB.
    #Throw the an error, exit beofre modifying any of the files.
    my @unique_feature_ids = keys(%feature_id_hash);
    my $num_unique_feature_count = scalar(@unique_feature_ids);
    for (my $feature_id_count = 0; $feature_id_count < $num_unique_feature_count; $feature_id_count = $feature_id_count + $feature_batch_size)
    {
	my $this_batch_size = $feature_batch_size;
	if ( ($feature_id_count + $feature_batch_size) > $num_unique_feature_count)
	{
	    $this_batch_size =  $num_unique_feature_count % $feature_batch_size;
	}
	my @batch_feature_ids = @unique_feature_ids[$feature_id_count .. ($feature_id_count + $this_batch_size -1)];  
        my $find_features_q = qq^ select id from kbase_sapling_v1.Feature where id in (^.
                       join(",", ("?") x $this_batch_size) . ") ";
        my $find_features_qh = $dbh->prepare($find_features_q) or die "Unable to prepare find_features_q : $find_features_q : ".$dbh->errstr();
    	$find_features_qh->execute(@batch_feature_ids) or die "Unable to execute find_features_q : $find_features_q : ". 
                                                   $find_features_qh->errstr();
        while (my ($db_feature_id) = $find_features_qh->fetchrow_array())
    	{ 
            delete $feature_id_hash{$db_feature_id}; 
    	}
     } 
     if (scalar(keys(%feature_id_hash)) > 0) 
     { 
        $error_message .= "\nThe following Feature IDs in the measurement.tab file do not exist in the CDM.  ".
                          "Line number in the measurement tab record in '()'.\n"; 
        foreach my $temp_feature_id (keys(%feature_id_hash))
        { 
                $error_message .= "Feature ID : $temp_feature_id (".join (",",@{$feature_id_hash{$temp_feature_id}}).")\n"; 
        } 
        $error_message .= "\n";
    } 
}
close(IN); 

if ($error_message ne '') 
{ 
  process_error($error_message,$dir);
} 

#print sample header line to new sample file
#make new sample.tab file
my $sample_file = $dir . "/sample.tab"; 
open (SAMPLE_FILE, ">".$sample_file) or die "Unable to make the new sample file : $sample_file $!\n";
print SAMPLE_FILE $sample_header_line . "\n";

#print measurement header line to new measurement file
#make new measurement.tab file 
my $measurement_file = $dir . "/measurement.tab"; 
open (MEASUREMENT_FILE, ">".$measurement_file) or die "Unable to make the new sample file : $sample_file $!\n"; 
print MEASUREMENT_FILE $measurement_header_line . "\n";	

#process each sample alone 
#grab the records from the original_measurement file and keep running list of unique feature_ids.
my @unique_sample_ids = sort(keys(%sample_lines_hash));
my $number_of_samples = scalar(@unique_sample_ids); 
my %duplicate_measurement_source_ids;
for (my $sample_id_count = 0; $sample_id_count < $number_of_samples; $sample_id_count = $sample_id_count + $sample_batch_size)
{ 	
    my $this_batch_size = $sample_batch_size;
    if (($sample_id_count + $sample_batch_size) > $number_of_samples)
    { 
        $this_batch_size =  $number_of_samples % $sample_batch_size;
    }
    my @batch_sample_ids = @unique_sample_ids[$sample_id_count .. ($sample_id_count + $this_batch_size -1)];  

    my %measurement_lines_hash; #key {sample_source_id}->{feature_id}= array ref to the elements of the measurement_line
    my %measurement_value_array_hash;  #key {sample_source_id}-> array ref to the values for that sample

    #go through the original_measurement file and grab all the values associated with any of the samples in that batch
    open (IN,$original_measurement_file) or die "Unable to open original measurement file : $original_measurement_file.\n\n"; 
    my $dummy_header_line = <IN>;
    while (my $measurement_line = <IN>)
    { 
	chomp($measurement_line);
        $measurement_line =~ s/\r//; 
        my @measurement_elements = split(/\t/,$measurement_line); 
	if($measurement_elements[$sampleIdColIndex] ~~ @batch_sample_ids)
	{
	    #PUT IN DATA STRUCTURES
	    if (defined($measurement_lines_hash{$measurement_elements[$sampleIdColIndex]}->{$measurement_elements[$measurementSourceIdColIndex]}))
	    {
		if (defined($duplicate_measurement_source_ids{$measurement_elements[$sampleIdColIndex]}))
		{
		    $duplicate_measurement_source_ids{$measurement_elements[$measurementSourceIdColIndex]} = 
		        $duplicate_measurement_source_ids{$measurement_elements[$measurementSourceIdColIndex]} + 1;
		}
		else
		{
		    $duplicate_measurement_source_ids{$measurement_elements[$measurementSourceIdColIndex]} = 2;
		}
	    }
            else
	    {
		$measurement_lines_hash{$measurement_elements[$sampleIdColIndex]}->{$measurement_elements[$measurementSourceIdColIndex]} 
                                                = \@measurement_elements;
	    } 
	    if (defined($measurement_value_array_hash{$measurement_elements[$sampleIdColIndex]}))
	    {
	        #if exists add another value to the array
                push(@{$measurement_value_array_hash{$measurement_elements[$sampleIdColIndex]}},$measurement_elements[$valueColIndex]);
            } 
            else 
            { 
                #did not exist, initialize the array with the first value
                $measurement_value_array_hash{$measurement_elements[$sampleIdColIndex]}=[$measurement_elements[$valueColIndex]];
	    }
	}
    }
    if (scalar(keys(%duplicate_measurement_source_ids)) > 0)
    {
	$error_message .= "\nThere are ".scalar(keys(%duplicate_measurement_source_ids))." measurement records with duplicate source ids.  ".
	                  "\nIf you want a detailed list of measurement source ids add \" show\" to the command you ran for this\n\n";
        if ( $show_measurement_duplicates == 1)
	{
	    foreach my $meas_source_id (sort(keys(%duplicate_measurement_source_ids)))
	    {
                $error_message .= "There are " . $duplicate_measurement_source_ids{$meas_source_id} . 
                                  " records with the same Measurement Source ID ". $meas_source_id . "\n";
	    }
	}        
    }

    close(IN);
    if ($error_message ne '') 
    { 
        close(SAMPLE_FILE); 
        close(MEASUREMENT_FILE); 
        process_error($error_message,$dir); 
    } 

    foreach my $sample_source_id (@batch_sample_ids) 
    {
        my @sample_elements = @{$sample_lines_hash{$sample_source_id}};             
	my @sorted_measurements = sort {$a <=> $b} @{$measurement_value_array_hash{$sample_source_id}};
        my $num_elements = scalar @sorted_measurements; 
        my $median; 
        if (($num_elements%2) == 0)
        { 
            $median = (($sorted_measurements[(($num_elements-1)/2)]) + 
                       ($sorted_measurements[(($num_elements)/2)]))/2 
        } 
        else #odd elements just take middle one 
        { 
            $median = $sorted_measurements[floor($num_elements/2)] 
        }
        #print "OLD SAMPLE: $sample_id - MEDIAN: $median - NUM ELEMENTS $num_elements \n"; 
        #set the originalLog2Median in for the sample 
        my $threshold = .00001;
        #Have a warning if the original log2Median had a value and the median is greater than the threshold.
        if ( ($sample_elements[$originalLog2MedianColIndex] =~ /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/ ) && 
             (abs($median) > $threshold))
        { 
            print "\nWARNING : Sample with the source_id $sample_source_id had an existing original log2median value of ".
   	        $sample_elements[$originalLog2MedianColIndex] . 
	        ".  However the measurement data for the sample did not have a median equal to zero (within $threshold). ".
	        "The median of the measurement data was $median .  The original log2 median value was changed to the new median value.";
        }   
        #PRINT SAMPLE LINE
        $sample_lines_hash{$sample_source_id}->[$originalLog2MedianColIndex] = $median; 
        print SAMPLE_FILE join("\t",@{$sample_lines_hash{$sample_source_id}})."\n"; 
        #PRINT ALL THE MEASUREMENT VALUES THAT MATCH THIS SAMPLE SOURCE ID
	foreach my $measurement_source_id (sort(keys(%{$measurement_lines_hash{$sample_source_id}})))
	{
	    my @temp_measurement_elements = @{$measurement_lines_hash{$sample_source_id}->{$measurement_source_id}};
	    $temp_measurement_elements[$valueColIndex] = $temp_measurement_elements[$valueColIndex] - $median;
	    print MEASUREMENT_FILE join("\t",@temp_measurement_elements)."\n";
	}
    }
    if ($error_message ne '') 
    {
	close(SAMPLE_FILE);
	close(MEASUREMENT_FILE); 
        process_error($error_message,$dir);
    }
} 

close(SAMPLE_FILE);
close(MEASUREMENT_FILE); 

if ($error_message ne '')
{
    process_error($error_message,$dir);
} 

print "\nSuccess:\n";
print "The original $sample_file has been renamed to $dir/original_sample.tab \n";
print "The original $measurement_file has been renamed to $dir/original_measurement.tab \n"; 
print "New $dir/sample.tab and $dir/measurement.tab files have been created\n\n";

my $timestamp = localtime(time);
print "\nEND TIME $timestamp \n";


sub column_header_checker ( $ $ $ $ )
{ 
    my $col_name = shift; 
    my $reg_ex = shift; 
    my $column_exists_flag = shift;
    my $counter = shift;
 
    if ($col_name =~ m/$reg_ex/i) 
    { 
        if (defined($column_exists_flag))
        { 
            return "duplicate";
        } 
        else 
        { 
            return $counter; 
        } 
    } 
    else 
    {		
        return $column_exists_flag; 
    } 
} 

sub process_error 
{
    my $error_message = shift;
    my $dir = shift;
    print "THE FOLLOWING ERRORS NEED TO BE ADDRESSED BEFORE THE PREPROCESSOR CAN WORK:\n".$error_message."\n";	
    print "\n\nReturing Files to original state:\n"; 
    print "Copying the  $dir/original_sample.tab back to $dir/sample.tab\n"; 
    print "Copying the  $dir/original_measurement.tab back to $dir/measurement.tab\n"; 
    `cp $dir/original_sample.tab $dir/sample.tab`; 
    `cp $dir/original_measurement.tab $dir/measurement.tab`; 
    exit; 
}

# Perl trim function to remove whitespace from the start and end of the string
sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}
# Left trim function to remove leading whitespace
sub ltrim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	return $string;
}
# Right trim function to remove trailing whitespace
sub rtrim($)
{
	my $string = shift;
	$string =~ s/\s+$//;
	return $string;
}
